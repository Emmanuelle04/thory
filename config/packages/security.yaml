security:
  encoders:
    App\Entity\User: bcrypt
    # Symfony\Component\Security\Core\User\User: plaintext
    #enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords

  role_hierarchy:
    ROLE_ADMIN: [ ROLE_ADMIN, ROLE_USER ]
    ROLE_USER: [ ROLE_USER ]
#    ROLE_SUPER_ADMIN: [ ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]

  # password_hashers:
  #     Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

  providers:
    database_users:
      entity: { class: App\Entity\User, property: username }
    # in_memory:
    # memory:
    #     users:
    #     user:  { password: userpass, roles: [ 'ROLE_USER' ] }
    #     admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      pattern: ^/
      anonymous: true
      logout:
        path: security_logout
      guard:
        authenticators:
          - App\Security\FormLoginAuthenticator
      #     lazy: true
      #     provider: users_in_memory

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
